{"env_info": "sys.platform: linux\nPython: 3.7.4 (default, Aug 13 2019, 20:35:49) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce GTX 1080 Ti\nCUDA_HOME: /usr/local/cuda-9.2\nNVCC: Cuda compilation tools, release 9.2, V9.2.148\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.3.1+cu92\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 9.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.4.2+cu92\nOpenCV: 4.1.0\nMMCV: 1.2.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 9.2\nMMDetection: 2.7.0+fc0a9eb", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='checkpoints/faster_rcnn_r101_fpn_1x_coco_20200130-f513f705.pth',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/SSDD/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/coco/SSDD/annotations/voc_2007_train.json',\n        img_prefix='data/coco/SSDD/train2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/coco/SSDD/annotations/voc_2007_val.json',\n        img_prefix='data/coco/SSDD/val2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/SSDD/annotations/voc_2007_test.json',\n        img_prefix='data/coco/SSDD/test2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = 'output20210108'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "faster_rcnn_r101_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 5674, "data_time": 0.04999, "loss_rpn_cls": 0.55659, "loss_rpn_bbox": 0.02085, "loss_cls": 0.31257, "acc": 99.09961, "loss_bbox": 0.01046, "loss": 0.90047, "time": 0.6273}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 5674, "data_time": 0.00548, "loss_rpn_cls": 0.154, "loss_rpn_bbox": 0.02325, "loss_cls": 0.14539, "acc": 99.36328, "loss_bbox": 0.00723, "loss": 0.32987, "time": 0.59406}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 5674, "data_time": 0.0054, "loss_rpn_cls": 0.12745, "loss_rpn_bbox": 0.02532, "loss_cls": 0.12181, "acc": 99.01367, "loss_bbox": 0.02085, "loss": 0.29544, "time": 0.60118}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 5674, "data_time": 0.00542, "loss_rpn_cls": 0.07419, "loss_rpn_bbox": 0.01774, "loss_cls": 0.10487, "acc": 98.21875, "loss_bbox": 0.06166, "loss": 0.25845, "time": 0.58428}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 5674, "data_time": 0.00546, "loss_rpn_cls": 0.06787, "loss_rpn_bbox": 0.01968, "loss_cls": 0.10245, "acc": 97.48438, "loss_bbox": 0.08656, "loss": 0.27656, "time": 0.59405}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 5674, "data_time": 0.00549, "loss_rpn_cls": 0.05807, "loss_rpn_bbox": 0.02112, "loss_cls": 0.10608, "acc": 96.98828, "loss_bbox": 0.1095, "loss": 0.29476, "time": 0.59458}
{"mode": "val", "epoch": 1, "iter": 349, "lr": 0.01393, "bbox_mAP": 0.129, "bbox_mAP_50": 0.426, "bbox_mAP_75": 0.029, "bbox_mAP_s": 0.165, "bbox_mAP_m": 0.089, "bbox_mAP_l": 0.033, "bbox_mAP_copypaste": "0.129 0.426 0.029 0.165 0.089 0.033"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01592, "memory": 5674, "data_time": 0.05093, "loss_rpn_cls": 0.04107, "loss_rpn_bbox": 0.02123, "loss_cls": 0.08787, "acc": 97.01562, "loss_bbox": 0.09482, "loss": 0.24499, "time": 0.64041}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01792, "memory": 5674, "data_time": 0.00528, "loss_rpn_cls": 0.03849, "loss_rpn_bbox": 0.01818, "loss_cls": 0.10076, "acc": 96.74805, "loss_bbox": 0.08901, "loss": 0.24643, "time": 0.5823}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01992, "memory": 5674, "data_time": 0.00531, "loss_rpn_cls": 0.03664, "loss_rpn_bbox": 0.01958, "loss_cls": 0.07279, "acc": 97.55859, "loss_bbox": 0.08502, "loss": 0.21402, "time": 0.59788}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.02, "memory": 5674, "data_time": 0.00516, "loss_rpn_cls": 0.03861, "loss_rpn_bbox": 0.02025, "loss_cls": 0.08348, "acc": 97.16992, "loss_bbox": 0.09504, "loss": 0.23738, "time": 0.60632}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.02, "memory": 5674, "data_time": 0.00522, "loss_rpn_cls": 0.0224, "loss_rpn_bbox": 0.02069, "loss_cls": 0.09125, "acc": 96.56641, "loss_bbox": 0.11047, "loss": 0.2448, "time": 0.60431}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.02, "memory": 5674, "data_time": 0.00519, "loss_rpn_cls": 0.03192, "loss_rpn_bbox": 0.02482, "loss_cls": 0.10049, "acc": 96.12109, "loss_bbox": 0.12266, "loss": 0.27989, "time": 0.60091}
{"mode": "val", "epoch": 2, "iter": 349, "lr": 0.02, "bbox_mAP": 0.245, "bbox_mAP_50": 0.613, "bbox_mAP_75": 0.123, "bbox_mAP_s": 0.288, "bbox_mAP_m": 0.199, "bbox_mAP_l": 0.251, "bbox_mAP_copypaste": "0.245 0.613 0.123 0.288 0.199 0.251"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 5674, "data_time": 0.05096, "loss_rpn_cls": 0.03665, "loss_rpn_bbox": 0.02498, "loss_cls": 0.07073, "acc": 97.41211, "loss_bbox": 0.08239, "loss": 0.21475, "time": 0.6415}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 5674, "data_time": 0.00529, "loss_rpn_cls": 0.02068, "loss_rpn_bbox": 0.01892, "loss_cls": 0.09416, "acc": 96.42188, "loss_bbox": 0.11222, "loss": 0.24598, "time": 0.59489}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 5674, "data_time": 0.00536, "loss_rpn_cls": 0.02431, "loss_rpn_bbox": 0.01858, "loss_cls": 0.08371, "acc": 96.92383, "loss_bbox": 0.09195, "loss": 0.21854, "time": 0.60406}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 5675, "data_time": 0.00524, "loss_rpn_cls": 0.02664, "loss_rpn_bbox": 0.0258, "loss_cls": 0.07286, "acc": 97.12891, "loss_bbox": 0.09396, "loss": 0.21926, "time": 0.59474}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.02, "memory": 5675, "data_time": 0.00521, "loss_rpn_cls": 0.03587, "loss_rpn_bbox": 0.01948, "loss_cls": 0.07112, "acc": 97.40039, "loss_bbox": 0.09401, "loss": 0.22049, "time": 0.59067}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.02, "memory": 5675, "data_time": 0.00526, "loss_rpn_cls": 0.02561, "loss_rpn_bbox": 0.01969, "loss_cls": 0.08388, "acc": 96.71094, "loss_bbox": 0.11489, "loss": 0.24408, "time": 0.59622}
{"mode": "val", "epoch": 3, "iter": 349, "lr": 0.02, "bbox_mAP": 0.279, "bbox_mAP_50": 0.658, "bbox_mAP_75": 0.16, "bbox_mAP_s": 0.321, "bbox_mAP_m": 0.229, "bbox_mAP_l": 0.271, "bbox_mAP_copypaste": "0.279 0.658 0.160 0.321 0.229 0.271"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 5675, "data_time": 0.05032, "loss_rpn_cls": 0.02177, "loss_rpn_bbox": 0.01907, "loss_cls": 0.07924, "acc": 97.19922, "loss_bbox": 0.09092, "loss": 0.211, "time": 0.64175}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 5675, "data_time": 0.00521, "loss_rpn_cls": 0.02103, "loss_rpn_bbox": 0.0239, "loss_cls": 0.0832, "acc": 96.76172, "loss_bbox": 0.10588, "loss": 0.234, "time": 0.60381}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 5675, "data_time": 0.00535, "loss_rpn_cls": 0.01575, "loss_rpn_bbox": 0.01689, "loss_cls": 0.06903, "acc": 97.41797, "loss_bbox": 0.09324, "loss": 0.19492, "time": 0.61024}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 5675, "data_time": 0.00535, "loss_rpn_cls": 0.01429, "loss_rpn_bbox": 0.01854, "loss_cls": 0.06718, "acc": 97.41406, "loss_bbox": 0.09234, "loss": 0.19235, "time": 0.61649}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.02, "memory": 5675, "data_time": 0.00526, "loss_rpn_cls": 0.01508, "loss_rpn_bbox": 0.01858, "loss_cls": 0.0784, "acc": 96.73438, "loss_bbox": 0.10983, "loss": 0.22188, "time": 0.6006}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.02, "memory": 5675, "data_time": 0.00527, "loss_rpn_cls": 0.03823, "loss_rpn_bbox": 0.02679, "loss_cls": 0.08252, "acc": 96.75781, "loss_bbox": 0.11858, "loss": 0.26612, "time": 0.60683}
{"mode": "val", "epoch": 4, "iter": 349, "lr": 0.02, "bbox_mAP": 0.321, "bbox_mAP_50": 0.757, "bbox_mAP_75": 0.199, "bbox_mAP_s": 0.338, "bbox_mAP_m": 0.301, "bbox_mAP_l": 0.274, "bbox_mAP_copypaste": "0.321 0.757 0.199 0.338 0.301 0.274"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 5675, "data_time": 0.05018, "loss_rpn_cls": 0.01868, "loss_rpn_bbox": 0.01846, "loss_cls": 0.07251, "acc": 97.30273, "loss_bbox": 0.09611, "loss": 0.20576, "time": 0.64293}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 5675, "data_time": 0.00524, "loss_rpn_cls": 0.02728, "loss_rpn_bbox": 0.02081, "loss_cls": 0.06281, "acc": 97.63086, "loss_bbox": 0.0861, "loss": 0.197, "time": 0.60039}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 5675, "data_time": 0.00532, "loss_rpn_cls": 0.01856, "loss_rpn_bbox": 0.01698, "loss_cls": 0.07464, "acc": 97.13672, "loss_bbox": 0.09474, "loss": 0.20493, "time": 0.61391}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.02, "memory": 5675, "data_time": 0.00545, "loss_rpn_cls": 0.01866, "loss_rpn_bbox": 0.02153, "loss_cls": 0.08532, "acc": 96.69141, "loss_bbox": 0.09321, "loss": 0.21872, "time": 0.60647}
{"mode": "train", "epoch": 5, "iter": 250, "lr": 0.02, "memory": 5675, "data_time": 0.00534, "loss_rpn_cls": 0.01645, "loss_rpn_bbox": 0.02099, "loss_cls": 0.07907, "acc": 96.81445, "loss_bbox": 0.10303, "loss": 0.21954, "time": 0.58665}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.02, "memory": 5675, "data_time": 0.00554, "loss_rpn_cls": 0.01492, "loss_rpn_bbox": 0.0155, "loss_cls": 0.07056, "acc": 97.23047, "loss_bbox": 0.10591, "loss": 0.20689, "time": 0.60327}
{"mode": "val", "epoch": 5, "iter": 349, "lr": 0.02, "bbox_mAP": 0.327, "bbox_mAP_50": 0.71, "bbox_mAP_75": 0.217, "bbox_mAP_s": 0.347, "bbox_mAP_m": 0.3, "bbox_mAP_l": 0.341, "bbox_mAP_copypaste": "0.327 0.710 0.217 0.347 0.300 0.341"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 5675, "data_time": 0.0504, "loss_rpn_cls": 0.01781, "loss_rpn_bbox": 0.01851, "loss_cls": 0.07817, "acc": 97.05859, "loss_bbox": 0.1083, "loss": 0.2228, "time": 0.63829}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 5675, "data_time": 0.00515, "loss_rpn_cls": 0.02746, "loss_rpn_bbox": 0.02739, "loss_cls": 0.09626, "acc": 96.26367, "loss_bbox": 0.13085, "loss": 0.28196, "time": 0.60097}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 5675, "data_time": 0.0052, "loss_rpn_cls": 0.01533, "loss_rpn_bbox": 0.01757, "loss_cls": 0.0827, "acc": 96.67773, "loss_bbox": 0.1036, "loss": 0.2192, "time": 0.60216}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.02, "memory": 5675, "data_time": 0.00526, "loss_rpn_cls": 0.01312, "loss_rpn_bbox": 0.01728, "loss_cls": 0.06848, "acc": 97.20312, "loss_bbox": 0.10731, "loss": 0.20618, "time": 0.60432}
{"mode": "train", "epoch": 6, "iter": 250, "lr": 0.02, "memory": 5675, "data_time": 0.00519, "loss_rpn_cls": 0.01362, "loss_rpn_bbox": 0.01672, "loss_cls": 0.07891, "acc": 96.94727, "loss_bbox": 0.11279, "loss": 0.22206, "time": 0.60774}
{"mode": "train", "epoch": 6, "iter": 300, "lr": 0.02, "memory": 5675, "data_time": 0.00515, "loss_rpn_cls": 0.01273, "loss_rpn_bbox": 0.01617, "loss_cls": 0.08006, "acc": 96.80469, "loss_bbox": 0.11819, "loss": 0.22714, "time": 0.59255}
{"mode": "val", "epoch": 6, "iter": 349, "lr": 0.02, "bbox_mAP": 0.352, "bbox_mAP_50": 0.776, "bbox_mAP_75": 0.254, "bbox_mAP_s": 0.384, "bbox_mAP_m": 0.305, "bbox_mAP_l": 0.364, "bbox_mAP_copypaste": "0.352 0.776 0.254 0.384 0.305 0.364"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 5675, "data_time": 0.05148, "loss_rpn_cls": 0.01749, "loss_rpn_bbox": 0.01657, "loss_cls": 0.07784, "acc": 96.89648, "loss_bbox": 0.10256, "loss": 0.21446, "time": 0.65326}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 5675, "data_time": 0.00529, "loss_rpn_cls": 0.01214, "loss_rpn_bbox": 0.01577, "loss_cls": 0.0779, "acc": 96.83008, "loss_bbox": 0.12006, "loss": 0.22586, "time": 0.60314}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 5675, "data_time": 0.00523, "loss_rpn_cls": 0.01472, "loss_rpn_bbox": 0.0196, "loss_cls": 0.08089, "acc": 96.78516, "loss_bbox": 0.12925, "loss": 0.24445, "time": 0.59544}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.02, "memory": 5675, "data_time": 0.00524, "loss_rpn_cls": 0.01146, "loss_rpn_bbox": 0.01887, "loss_cls": 0.08127, "acc": 96.67969, "loss_bbox": 0.12643, "loss": 0.23803, "time": 0.60656}
{"mode": "train", "epoch": 7, "iter": 250, "lr": 0.02, "memory": 5675, "data_time": 0.00547, "loss_rpn_cls": 0.01177, "loss_rpn_bbox": 0.014, "loss_cls": 0.0635, "acc": 97.48828, "loss_bbox": 0.08977, "loss": 0.17905, "time": 0.5951}
{"mode": "train", "epoch": 7, "iter": 300, "lr": 0.02, "memory": 5675, "data_time": 0.0054, "loss_rpn_cls": 0.01961, "loss_rpn_bbox": 0.01843, "loss_cls": 0.07313, "acc": 97.08008, "loss_bbox": 0.11524, "loss": 0.22641, "time": 0.60776}
{"mode": "val", "epoch": 7, "iter": 349, "lr": 0.02, "bbox_mAP": 0.44, "bbox_mAP_50": 0.842, "bbox_mAP_75": 0.396, "bbox_mAP_s": 0.442, "bbox_mAP_m": 0.433, "bbox_mAP_l": 0.505, "bbox_mAP_copypaste": "0.440 0.842 0.396 0.442 0.433 0.505"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 5675, "data_time": 0.05077, "loss_rpn_cls": 0.01332, "loss_rpn_bbox": 0.01661, "loss_cls": 0.07251, "acc": 97.06055, "loss_bbox": 0.11714, "loss": 0.21958, "time": 0.64286}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 5675, "data_time": 0.00503, "loss_rpn_cls": 0.01264, "loss_rpn_bbox": 0.01532, "loss_cls": 0.07236, "acc": 97.07617, "loss_bbox": 0.10841, "loss": 0.20873, "time": 0.60113}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 5675, "data_time": 0.00523, "loss_rpn_cls": 0.03124, "loss_rpn_bbox": 0.02811, "loss_cls": 0.07385, "acc": 97.1875, "loss_bbox": 0.10456, "loss": 0.23775, "time": 0.59672}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.02, "memory": 5675, "data_time": 0.00531, "loss_rpn_cls": 0.01483, "loss_rpn_bbox": 0.01453, "loss_cls": 0.05842, "acc": 97.75195, "loss_bbox": 0.08661, "loss": 0.17439, "time": 0.59458}
{"mode": "train", "epoch": 8, "iter": 250, "lr": 0.02, "memory": 5675, "data_time": 0.0055, "loss_rpn_cls": 0.01339, "loss_rpn_bbox": 0.01713, "loss_cls": 0.07947, "acc": 96.9082, "loss_bbox": 0.11618, "loss": 0.22617, "time": 0.61038}
{"mode": "train", "epoch": 8, "iter": 300, "lr": 0.02, "memory": 5675, "data_time": 0.00573, "loss_rpn_cls": 0.01429, "loss_rpn_bbox": 0.01722, "loss_cls": 0.07787, "acc": 96.97461, "loss_bbox": 0.1159, "loss": 0.22529, "time": 0.60839}
{"mode": "val", "epoch": 8, "iter": 349, "lr": 0.02, "bbox_mAP": 0.397, "bbox_mAP_50": 0.84, "bbox_mAP_75": 0.247, "bbox_mAP_s": 0.414, "bbox_mAP_m": 0.378, "bbox_mAP_l": 0.324, "bbox_mAP_copypaste": "0.397 0.840 0.247 0.414 0.378 0.324"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 5675, "data_time": 0.05062, "loss_rpn_cls": 0.0169, "loss_rpn_bbox": 0.02119, "loss_cls": 0.07684, "acc": 96.92578, "loss_bbox": 0.12521, "loss": 0.24013, "time": 0.65875}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 5675, "data_time": 0.00509, "loss_rpn_cls": 0.00951, "loss_rpn_bbox": 0.01434, "loss_cls": 0.06507, "acc": 97.3125, "loss_bbox": 0.10259, "loss": 0.19151, "time": 0.5991}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.002, "memory": 5675, "data_time": 0.00525, "loss_rpn_cls": 0.01081, "loss_rpn_bbox": 0.01311, "loss_cls": 0.06386, "acc": 97.33594, "loss_bbox": 0.10901, "loss": 0.1968, "time": 0.62493}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.002, "memory": 5675, "data_time": 0.00529, "loss_rpn_cls": 0.01136, "loss_rpn_bbox": 0.01163, "loss_cls": 0.06908, "acc": 97.19531, "loss_bbox": 0.11113, "loss": 0.2032, "time": 0.61369}
{"mode": "train", "epoch": 9, "iter": 250, "lr": 0.002, "memory": 5675, "data_time": 0.00538, "loss_rpn_cls": 0.01189, "loss_rpn_bbox": 0.01445, "loss_cls": 0.05831, "acc": 97.66992, "loss_bbox": 0.09833, "loss": 0.18299, "time": 0.61602}
{"mode": "train", "epoch": 9, "iter": 300, "lr": 0.002, "memory": 5675, "data_time": 0.00542, "loss_rpn_cls": 0.01169, "loss_rpn_bbox": 0.0157, "loss_cls": 0.0704, "acc": 97.08203, "loss_bbox": 0.11119, "loss": 0.20899, "time": 0.61278}
{"mode": "val", "epoch": 9, "iter": 349, "lr": 0.002, "bbox_mAP": 0.483, "bbox_mAP_50": 0.86, "bbox_mAP_75": 0.502, "bbox_mAP_s": 0.483, "bbox_mAP_m": 0.488, "bbox_mAP_l": 0.492, "bbox_mAP_copypaste": "0.483 0.860 0.502 0.483 0.488 0.492"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 5675, "data_time": 0.05007, "loss_rpn_cls": 0.00951, "loss_rpn_bbox": 0.01406, "loss_cls": 0.0636, "acc": 97.34961, "loss_bbox": 0.11033, "loss": 0.1975, "time": 0.64618}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 5675, "data_time": 0.00508, "loss_rpn_cls": 0.01442, "loss_rpn_bbox": 0.01427, "loss_cls": 0.06639, "acc": 97.2168, "loss_bbox": 0.10748, "loss": 0.20256, "time": 0.60373}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.002, "memory": 5675, "data_time": 0.00518, "loss_rpn_cls": 0.01, "loss_rpn_bbox": 0.01412, "loss_cls": 0.06558, "acc": 97.2793, "loss_bbox": 0.10558, "loss": 0.19527, "time": 0.6092}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.002, "memory": 5675, "data_time": 0.00527, "loss_rpn_cls": 0.01028, "loss_rpn_bbox": 0.01344, "loss_cls": 0.0595, "acc": 97.63281, "loss_bbox": 0.10049, "loss": 0.18371, "time": 0.60951}
{"mode": "train", "epoch": 10, "iter": 250, "lr": 0.002, "memory": 5675, "data_time": 0.00531, "loss_rpn_cls": 0.00802, "loss_rpn_bbox": 0.01265, "loss_cls": 0.06142, "acc": 97.39062, "loss_bbox": 0.10414, "loss": 0.18622, "time": 0.5991}
{"mode": "train", "epoch": 10, "iter": 300, "lr": 0.002, "memory": 5675, "data_time": 0.00538, "loss_rpn_cls": 0.0074, "loss_rpn_bbox": 0.01187, "loss_cls": 0.05776, "acc": 97.62695, "loss_bbox": 0.09994, "loss": 0.17697, "time": 0.6074}
{"mode": "val", "epoch": 10, "iter": 349, "lr": 0.002, "bbox_mAP": 0.495, "bbox_mAP_50": 0.876, "bbox_mAP_75": 0.526, "bbox_mAP_s": 0.494, "bbox_mAP_m": 0.507, "bbox_mAP_l": 0.493, "bbox_mAP_copypaste": "0.495 0.876 0.526 0.494 0.507 0.493"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 5675, "data_time": 0.0515, "loss_rpn_cls": 0.01289, "loss_rpn_bbox": 0.01386, "loss_cls": 0.0705, "acc": 97.13672, "loss_bbox": 0.12016, "loss": 0.2174, "time": 0.65499}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 5675, "data_time": 0.00534, "loss_rpn_cls": 0.01087, "loss_rpn_bbox": 0.0144, "loss_cls": 0.06162, "acc": 97.41406, "loss_bbox": 0.10877, "loss": 0.19567, "time": 0.60846}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.002, "memory": 5675, "data_time": 0.00554, "loss_rpn_cls": 0.01034, "loss_rpn_bbox": 0.0149, "loss_cls": 0.06871, "acc": 97.1875, "loss_bbox": 0.12457, "loss": 0.21851, "time": 0.61644}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.002, "memory": 5675, "data_time": 0.00587, "loss_rpn_cls": 0.01037, "loss_rpn_bbox": 0.01222, "loss_cls": 0.05728, "acc": 97.70117, "loss_bbox": 0.09649, "loss": 0.17636, "time": 0.60031}
{"mode": "train", "epoch": 11, "iter": 250, "lr": 0.002, "memory": 5675, "data_time": 0.00583, "loss_rpn_cls": 0.0074, "loss_rpn_bbox": 0.01638, "loss_cls": 0.06662, "acc": 97.2168, "loss_bbox": 0.11562, "loss": 0.20601, "time": 0.59874}
{"mode": "train", "epoch": 11, "iter": 300, "lr": 0.002, "memory": 5675, "data_time": 0.00581, "loss_rpn_cls": 0.01185, "loss_rpn_bbox": 0.01252, "loss_cls": 0.06103, "acc": 97.52148, "loss_bbox": 0.08711, "loss": 0.17252, "time": 0.60043}
{"mode": "val", "epoch": 11, "iter": 349, "lr": 0.002, "bbox_mAP": 0.492, "bbox_mAP_50": 0.877, "bbox_mAP_75": 0.526, "bbox_mAP_s": 0.484, "bbox_mAP_m": 0.515, "bbox_mAP_l": 0.446, "bbox_mAP_copypaste": "0.492 0.877 0.526 0.484 0.515 0.446"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 5675, "data_time": 0.05051, "loss_rpn_cls": 0.00823, "loss_rpn_bbox": 0.0131, "loss_cls": 0.06325, "acc": 97.37305, "loss_bbox": 0.10887, "loss": 0.19346, "time": 0.65301}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 5675, "data_time": 0.00503, "loss_rpn_cls": 0.00586, "loss_rpn_bbox": 0.01182, "loss_cls": 0.05856, "acc": 97.49414, "loss_bbox": 0.10055, "loss": 0.17679, "time": 0.60821}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0002, "memory": 5675, "data_time": 0.00507, "loss_rpn_cls": 0.00931, "loss_rpn_bbox": 0.01198, "loss_cls": 0.0551, "acc": 97.81836, "loss_bbox": 0.09061, "loss": 0.167, "time": 0.60361}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0002, "memory": 5675, "data_time": 0.00521, "loss_rpn_cls": 0.00997, "loss_rpn_bbox": 0.01354, "loss_cls": 0.06171, "acc": 97.45312, "loss_bbox": 0.10631, "loss": 0.19153, "time": 0.59824}
{"mode": "train", "epoch": 12, "iter": 250, "lr": 0.0002, "memory": 5675, "data_time": 0.00523, "loss_rpn_cls": 0.00663, "loss_rpn_bbox": 0.00859, "loss_cls": 0.05419, "acc": 97.69336, "loss_bbox": 0.08888, "loss": 0.15829, "time": 0.60559}
{"mode": "train", "epoch": 12, "iter": 300, "lr": 0.0002, "memory": 5675, "data_time": 0.00529, "loss_rpn_cls": 0.0117, "loss_rpn_bbox": 0.01523, "loss_cls": 0.06546, "acc": 97.37305, "loss_bbox": 0.1144, "loss": 0.20678, "time": 0.61512}
{"mode": "val", "epoch": 12, "iter": 349, "lr": 0.0002, "bbox_mAP": 0.507, "bbox_mAP_50": 0.887, "bbox_mAP_75": 0.556, "bbox_mAP_s": 0.504, "bbox_mAP_m": 0.522, "bbox_mAP_l": 0.475, "bbox_mAP_copypaste": "0.507 0.887 0.556 0.504 0.522 0.475"}
